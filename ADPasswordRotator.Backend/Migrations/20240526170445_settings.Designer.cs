// <auto-generated />
using System;
using ADPasswordRotator.Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADPasswordRotator.Backend.Migrations
{
    [DbContext(typeof(ADContext))]
    [Migration("20240526170445_settings")]
    partial class settings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.DomainController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("DomainControllers");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DomainControllerId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DomainControllerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceAccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.ServiceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastPasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PasswordResetIntervalType")
                        .HasColumnType("int");

                    b.Property<int>("PasswordResetIntervalValue")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ServiceAccounts");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.SettingsOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Internal")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SettingsOptions");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.DomainController", b =>
                {
                    b.HasOne("ADPasswordRotator.Shared.Model.Location", "Location")
                        .WithMany("Controllers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.Notification", b =>
                {
                    b.HasOne("ADPasswordRotator.Shared.Model.DomainController", "DomainController")
                        .WithMany("Notifications")
                        .HasForeignKey("DomainControllerId");

                    b.HasOne("ADPasswordRotator.Shared.Model.Location", "Location")
                        .WithMany("Notifications")
                        .HasForeignKey("LocationId");

                    b.HasOne("ADPasswordRotator.Shared.Model.ServiceAccount", "ServiceAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ServiceAccountId");

                    b.Navigation("DomainController");

                    b.Navigation("Location");

                    b.Navigation("ServiceAccount");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.ServiceAccount", b =>
                {
                    b.HasOne("ADPasswordRotator.Shared.Model.Location", "Location")
                        .WithMany("Accounts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.DomainController", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.Location", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Controllers");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ADPasswordRotator.Shared.Model.ServiceAccount", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
